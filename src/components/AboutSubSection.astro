---
import MyImage from "./MyImage.astro";

interface Props {
	title: string;
	src: string;
	alt: string;
	direction?: "left" | "right";
	text: string[];
	loading?: "lazy" | "eager";
}

const { title, src, text, alt, direction = "left", loading = "lazy" } = Astro.props;

const float = direction === "left" ? "xl:float-start" : "xl:float-end";

const imgClass = direction === "left" ? "left-img" : "right-img";
---

<div class="flex flex-col items-center px-8 md:px-32 lg:px-64 2xl:inline-block 2xl:px-[24rem]">
	<h2 class="subtitle m-8">{title}</h2>

		<MyImage
			class={`${imgClass} md:w-[80%] lg:w-[60%] 2xl:w-[300px] rounded-md mb-8 ${float} xl:mx-8`}
			imagePath={src}
			altText={alt}
			widths={[256, 500, 790, 1000]}
			sizes="(min-width: 600px) 500px, calc(96.43vw - 59px)"
			loading={loading}
		/>
	
			{text.map((t) => <p class="mb-4">{t}</p>)}
</div>

<!--
	Styles inline because when I use <MyImage />
	component, the styles are not applied.
-->
<style is:inline>
	.left-img {
		animation-timeline: view();
		animation-fill-mode: both;
		animation-range: entry 25% cover 50%;
		border-radius: 10px;
		animation-name: left;
	}

	.right-img {
		animation-timeline: view();
		animation-fill-mode: both;
		animation-range: entry 25% cover 50%;
		border-radius: 10px;
		animation-name: right;
	}
</style>

<style>
	:root {
		--start-deg: 5deg;
		--end-deg: 1deg;
	}

	p {
		animation-name: fade-in-text;
		animation-timeline: view();
		animation-fill-mode: both;
		animation-range: entry 0% cover 12%;
	}

	@media (max-width: 640px) {
		p {
			animation-range: entry 0% cover 25%;
		}
	}

	@media (max-width: 1024px) {
		p {
			animation-range: entry 0% cover 20%;
		}
	}

	@keyframes fade-in-text {
		from {
			opacity: 0;
			transform: translateY(20px);
			scale: 0.5;
		}

		to {
			opacity: 1;
			transform: translateY(0);
			scale: 1;
		}
	}

	@keyframes left {
		from {
			opacity: 0.25;
			transform: translateX(-200px);
			rotate: -var(--start-deg);
		}

		to {
			opacity: 1;
			transform: translateX(0);
			rotate: var(--end-deg);
		}
	}

	@keyframes right {
		from {
			opacity: 0.25;
			transform: translateX(200px);
			rotate: var(--start-deg);
		}

		to {
			opacity: 1;
			transform: translateX(0);
			rotate: calc(var(--end-deg) * -1);
		}
	}
</style>
