---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import ChevronLeft from "@/icons/ChevronLeft.astro";
import ChevronRight from "@/icons/ChevronRight.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="fade-up flex flex-col items-center px-4">
	<h2 class="subtitle mt-8">{t("map.subtitle_1")}</h2>

	<div class="flex h-auto w-full flex-col rounded-md bg-white p-[10px] shadow-sm sm:w-[500px]">
		<div class="header mb-[10px] flex items-center justify-between">
			<button
				id="prevBtn"
				class="*:duration-250 flex size-[40px] cursor-pointer items-center justify-center rounded-[50%] border-none bg-white shadow-[0_0_4px_rgba(0,0,0,0.2)] *:transition-all *:hover:fill-black"
			>
				<ChevronLeft className="size-4 fill-current" />
			</button>
			<div class="monthYear" id="monthYear"></div>
			<button
				id="nextBtn"
				class="*:duration-250 flex size-[40px] cursor-pointer items-center justify-center rounded-[50%] border-none bg-white shadow-[0_0_4px_rgba(0,0,0,0.2)] *:transition-all *:hover:fill-black"
			>
				<ChevronRight className="size-4 fill-current" />
			</button>
		</div>

		<div class="grid grid-cols-[repeat(7,1fr)] *:p-[5px] *:text-center *:font-medium *:text-[#585858]">
			<div class="day">Mon</div>
			<div class="day">Tue</div>
			<div class="day">Wed</div>
			<div class="day">Thu</div>
			<div class="day">Fri</div>
			<div class="day">Sat</div>
			<div class="day">Sun</div>
		</div>
		<div class="grid grid-cols-[repeat(7,1fr)] gap-[5px]" id="dates"></div>
	</div>
</div>

<script>
	import { createIntersectionObserver, observeAll } from "@/helpers/IntersectionObserver";

	const runAnimation = () => {
		const fadeUpObserver = createIntersectionObserver(undefined, { threshold: 0.2 });
		observeAll(fadeUpObserver, ".fade-up");
	};

	document.addEventListener("astro:page-load", runAnimation);
</script>

<script>
	import type { Travel } from "@/constants.ts";
	import { nextTravels } from "@/constants.ts";

	alert("Script started");

	const monthYearElement = document.getElementById("monthYear") as HTMLDivElement;
	const datesElement = document.getElementById("dates") as HTMLDivElement;
	const prevBtn = document.getElementById("prevBtn") as HTMLButtonElement;
	const nextBtn = document.getElementById("nextBtn") as HTMLButtonElement;

	if (!monthYearElement) alert("monthYearElement not found");
	if (!datesElement) alert("datesElement not found");
	if (!prevBtn) alert("prevBtn not found");
	if (!nextBtn) alert("nextBtn not found");

	const loadScript = () => {
		alert("loadScript called");
		let currentDate = new Date();

		const updateCalendar = () => {
			alert("updateCalendar called");
			const currentYear = currentDate.getFullYear();
			const currentMonth = currentDate.getMonth();

			const firstDay = new Date(currentYear, currentMonth, 0);
			const lastDay = new Date(currentYear, currentMonth + 1, 0);
			const totalDays = lastDay.getDate();
			const firstDayIndex = firstDay.getDay();
			const lastDayIndex = lastDay.getDay();

			const monthYearString = currentDate.toLocaleString("default", {
				month: "long",
				year: "numeric",
			});
			monthYearElement.textContent = monthYearString;

			let datesHTML = "";

			for (let i = firstDayIndex; i > 0; i--) {
				const prevDate = new Date(currentYear, currentMonth, 0 - i + 1);
				datesHTML += `<div class="date inactive">${prevDate.getDate()}</div>`;
			}

			for (let i = 1; i <= totalDays; i++) {
				const date = new Date(currentYear, currentMonth, i);
				const activeClass = date.toDateString() === new Date().toDateString() ? "active" : "";
				datesHTML += `<div class="date ${activeClass}">${i}</div>`;
			}

			for (let i = 1; i <= 7 - lastDayIndex; i++) {
				const nextDate = new Date(currentYear, currentMonth + 1, i);
				datesHTML += `<div class="date inactive">${nextDate.getDate()}</div>`;
			}

			datesElement.innerHTML = datesHTML;
			alert("updateCalendar completed");
		};

		const updateTravelsDays = () => {
			alert("updateTravelsDays called");
			const dates = document.querySelectorAll(".date");
			dates.forEach((date) => {
				const dateValue = date.textContent as string;
				const dateValueString = dateValue.length === 1 ? `0${dateValue}` : dateValue;

				// date in english format
				const dateValueFull = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${dateValueString}`;
				const fullDate = new Date(dateValueFull);

				const isInactive = date.classList.contains("inactive");

				// check if fullDate is between nextTravels[0].startDate and nextTravels[0].endDate or nextTravels[1].startDate and nextTravels[1].endDate
				// iterate over nextTravels
				nextTravels.forEach((travel: Travel) => {
					// create startDate and endDate adding the time T00:00:00 because if not the date will be different set n UTC time zone and after adding the time it will be in local time zone with +2 hours. Specifying the time will make the date to be in UTC time zone
					const startDate = new Date(`${travel.startDate}T00:00:00`);
					const endDate = new Date(`${travel.endDate}T00:00:00`);

					if (!isInactive && fullDate >= startDate && fullDate <= endDate) {
						date.classList.add("travel");
						date.classList.add("tooltip");
						date.setAttribute("data-tip", travel.country);
						alert(`Travel date found: ${dateValueFull} for ${travel.country}`);
					}
				});
			});
			alert("updateTravelsDays completed");
		};

		prevBtn.addEventListener("click", () => {
			alert("Prev button clicked");
			currentDate = new Date(currentDate.setMonth(currentDate.getMonth() - 1));
			updateCalendar();
			updateTravelsDays();
		});

		nextBtn.addEventListener("click", () => {
			alert("Next button clicked");
			currentDate = new Date(currentDate.setMonth(currentDate.getMonth() + 1));
			updateCalendar();
			updateTravelsDays();
		});

		updateCalendar();
		updateTravelsDays();
		alert("loadScript completed");
	};

	document.addEventListener("astro:page-load", loadScript);
	alert("Event listener added");
</script>

<style is:inline>
	.dates {
		display: grid;
		grid-template-columns: repeat(7, 1fr);
		gap: 5px;
	}

	.date {
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		padding: 10px;
		margin: auto;
		cursor: pointer;
		font-weight: 600;
		border-radius: 50%;
		width: 40px;
		height: 40px;
		transition: 0.2s;
		color: black;
	}

	.date:hover,
	.date.active {
		background: #ff5869;
		color: #fff;
	}

	.date.active.travel {
		background: #8758ff;
	}

	.date.inactive {
		color: #585858;
	}

	.date.inactive:hover {
		background: #fff;
	}

	.date.travel {
		background: #58b9ff;
		color: #fff;
	}

	.monthYear {
		color: #585858;
		font-weight: 500;
	}
</style>
