---
import Nav from "@/components/Nav.astro";
import { getValidPosts } from "@/helpers/posts";
import { getCollection } from "astro:content";

import "@/global.css";

interface Post {
  id: string;
  slug: string;
  body: string;
  collection: string;
  data: {
    title: string;
    pubDate: Date;
    draft: boolean;
    tags?: string[] | undefined;
    image?:
      | {
          src?: string | undefined;
          alt?: string | undefined;
        }
      | undefined;
  };
}

const { frontmatter, slug } = Astro.props;
const { minutesRead } = Astro.props.frontmatter;

// I want to get all posts in the project and get the next and previous post to add a link to them
const allPosts = await getCollection("blogs");
const posts: Post[] = getValidPosts(allPosts);
const currentPostIndex = posts.findIndex((post) => post.slug === slug);
const previousPost = posts[currentPostIndex - 1];
const nextPost = posts[currentPostIndex + 1];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={frontmatter.description} />
    <slot name="custom-header-scripts" />

    <title>{frontmatter.title}</title>
  </head>
  <body>
    <Nav />

    <div class="info">
      <h1 class="title">{frontmatter.title}</h1>
      <p class="read-time">{minutesRead}</p>
      <img src={frontmatter.image.src} alt={frontmatter.image.alt} />
    </div>

    <article class="content">
      <slot />
    </article>

    <div class="other-posts">
      {nextPost && <a href={nextPost.slug}>&larr; {nextPost.data.title}</a>}
      {
        previousPost && (
          <a class="previous-post" href={previousPost.slug}>
            {previousPost.data.title} &rarr;
          </a>
        )
      }
    </div>
  </body>
</html>

<style>
  .content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;

    strong,
    del {
      color: var(--special-text-color);
    }

    h1 {
      font-size: 2rem;
      margin-top: 0;
    }
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      align-self: flex-start;
    }

    a {
      color: var(--special-text-color);
      text-decoration-color: var(--special-text-color);
      transition: color 0.2s;

      &:hover {
        color: var(--quaternary-color);
        text-decoration-color: var(--quaternary-color);
      }
    }
  }

  .info {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1rem;

    & > .title {
      margin: 0;
      text-align: center;
    }

    & > .read-time {
      margin: 0.5em;
      font-size: 1.2rem;
      color: var(--tertiary-color);
    }

    & > img {
      width: 100%;
      max-width: 800px;
      border-radius: 0.5rem;
      margin: 1rem 0;
    }
  }

  .other-posts {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 100%;
    margin: 1rem 0;

    & .previous-post {
      align-self: flex-end;
    }
  }
</style>
