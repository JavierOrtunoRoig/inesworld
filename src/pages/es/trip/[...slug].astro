---
import { changeLanguage } from "i18next";
import BasicLayout from "@/layouts/BasicLayout.astro";
import { getCollection } from "astro:content";
import MyImage from "@/components/MyImage.astro";
import "@/../node_modules/viewerjs/dist/viewer.css";

changeLanguage("es");

export async function getStaticPaths() {
    const gallery = await getCollection("gallery");
    return gallery.map((gallery) => {
        return {
            params: {
                slug: gallery.id,
            },
            props: {
                gallery: gallery.data,
            },
        };
    });
}
const { gallery: { title, photos }, } = Astro.props;
// console.log({ photos });
let imagesGrouped: Record<string, any>[] = [];
let group1: Record<string, any>[] = [];
let group2: Record<string, any>[] = [];
let group3: Record<string, any>[] = [];
let groupSize = 3;
for (let i = 0; i < photos.length; i++) {
    if (i % groupSize === 0) {
        group1.push(photos[i]);
    }
    else if (i % groupSize === 1) {
        group2.push(photos[i]);
    }
    else {
        group3.push(photos[i]);
    }
}
imagesGrouped.push(group1, group2, group3);
---

<BasicLayout title={title}>
  <div class="gallery-container">
    <h1>{title}</h1>
    <div>
      {
        imagesGrouped.map((group) => (
          <div class="flex">
            {group.map((image) => (
              <MyImage imagePath={image.path} altText={image.description} class="fade-up hover:cursor-pointer" />
            ))}
          </div>
        ))
      }
    </div>
  </div>
</BasicLayout>

<!-- Script to add fade up animation -->
<script>
  import { createIntersectionObserver, observeAll } from "@/helpers/IntersectionObserver.js";

  const runAnimation = () => {
    const fadeUpObserver = createIntersectionObserver();
    observeAll(fadeUpObserver, ".fade-up");
  };

  document.addEventListener("astro:page-load", runAnimation);
</script>

<!-- Script to add image viewer -->
<script>
  import Viewer from "viewerjs";
  import introJs from "intro.js";
  import "intro.js/introjs.css";

  const loadScript = () => {
    const img = document.querySelector(".gallery-container") as HTMLElement;
    new Viewer(img, {
      viewed() {},
      url(image) {
        // get teh original images without compress
        const encodedUrl = image.src;
        let path = decodeURIComponent(encodedUrl).split("/src/assets")[1];
        path = path.split("?")[0];

        return path;
      },
    });

    const guideshouldNotRun = localStorage.getItem("guideshouldNotRun_gallery");

    if (guideshouldNotRun) return;

    introJs()
      .setOptions({
        tooltipClass: "guide",
        steps: [
          {
            intro: "Click on an image to view it in full screen.",
          },
        ],
      })
      .oncomplete(() => {
        localStorage.setItem("guideshouldNotRun_gallery", "true");
      })
      .start();
  };

  document.addEventListener("astro:page-load", loadScript);
</script>

<style>
  .gallery-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    justify-content: center;
    padding: 2rem;

    > h1 {
      text-align: center;
      font-size: 4rem;
      margin: 0 0 20px 0;
    }

    div {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-grow: 1;

      .flex {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        gap: 1rem;
        max-width: 500px;
      }

      img {
        border-radius: 0.5rem;
        width: 100%;
      }
    }
  }

  @media (max-width: 576px) {
    .gallery-container {
      > h1 {
        font-size: 3rem;
      }

      div {
        flex-wrap: wrap;
        width: 100%;

        .flex {
          width: 100%;
        }
      }
    }
  }
</style>

<style is:inline>
  .guide {
    color: black;
  }
</style>
