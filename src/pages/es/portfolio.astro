---
import IndonesiaImage from "@/assets/trips/indonesia/1.jpg";
import SwitzerlandImage from "@/assets/trips/switzerland/1.jpg";
import VietnamImage from "@/assets/trips/vietnam/1.jpg";
import trips from "@/constants/trips.json";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import ChevronLeft from "@/icons/ChevronLeft.astro";
import ChevronRight from "@/icons/ChevronRight.astro";
import BasicLayout from "@/layouts/BasicLayout.astro";
import { Image } from "astro:assets";
import { changeLanguage } from "i18next";

changeLanguage("es");

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const getPrefix = () => {
    return lang === "en" ? "" : `/${lang}`;
};
const getRightImageByIndex = (index: number) => {
    if (index === 0)
        return SwitzerlandImage;
    if (index === 1)
        return IndonesiaImage;
    if (index === 2)
        return VietnamImage;
    return SwitzerlandImage;
};
---

<BasicLayout description={t("portfolio.description")}>
	{
		trips.map((trip, index) => (
			<div class={`portfolio-container ${index === 0 ? "" : "hidden"}`}>
				<Image
					class="animate-fade"
					src={getRightImageByIndex(index)}
					alt={trip.title}
					widths={[300, 880, 1210, 1470, 1680, 1870, 2048]}
					sizes={"100vw"}
					loading={"eager"}
				/>
				<div class="gradient" />
				<div class="info-container">
					<aside class="arrow">
						<ChevronLeft />
					</aside>
					<article class="animate-fade-down">
						<h1 class="title">{trip.title}</h1>
						<a href={`${getPrefix()}${trip.link}`}>{t("portfolio.title")}</a>
					</article>
					<aside class="arrow">
						<ChevronRight />
					</aside>
				</div>
			</div>
		))
	}
</BasicLayout>

<script>
	const loadScript = () => {
		const containers = document.querySelectorAll(".portfolio-container") as NodeListOf<HTMLDivElement>;
		const arrows = document.querySelectorAll(".arrow") as NodeListOf<HTMLDivElement>;

		let current = 0;
		arrows.forEach((arrow, index) => {
			arrow.addEventListener("click", () => {
				containers[current].classList.add("hidden");
				if (index === 0) {
					current = current === 0 ? containers.length - 1 : current - 1;
				} else {
					current = current === containers.length - 1 ? 0 : current + 1;
				}
				containers[current].classList.remove("hidden");
			});
		});

		// add event when user press left or right arrow key
		document.addEventListener("keydown", (event) => {
			if (event.key === "ArrowLeft") {
				containers[current].classList.add("hidden");
				current = current === 0 ? containers.length - 1 : current - 1;
				containers[current].classList.remove("hidden");
			} else if (event.key === "ArrowRight") {
				containers[current].classList.add("hidden");
				current = current === containers.length - 1 ? 0 : current + 1;
				containers[current].classList.remove("hidden");
			}
		});
	};

	document.addEventListener("astro:page-load", loadScript);
</script>

<style>
	:root {
		--line-width: 70%;
		--line-color: #fff;
	}

	:global(.footer) {
		display: none;
	}

	/* 
		to move down or up the image:
		- down:
			- Change height + Xpx of offset
			- set top: 0
		- up:
			- Change height + Xpx of offset
			- set bottom: 0
	
	*/

	.portfolio-container {
		height: 100%;

		/* 
    Las imágenes son elementos de remplazo (así se llaman), es decir que en realidad su representación es externa a css.  No puedes cambiar lo que hay en la iamgen con css.
    Su propiedad display por defecto es inline y para muchos casos es tratada igual que un texto.  Esto significa que al igual que el texto, el css lo trata como si tuviera una línea base (baseline), auqnue en realidad no la tiene por ser imagen.
    Cuando css utiliza esa baseline, deja un espacio por debajo (esos 4px en tu caso) para que quepan los trazos descendentes de las letras que los tienen (como la letra g o q), es decir el trazo que va por debajo de la línea base.
    Si a la imagen le indicas que su display es de tipo block, css deja de usar la línea base para pintar la imagen.  También puedes decirle explicitamente que no use alineación por línea base sino que la use al medio:
    vertical-align: middle
    Con eso eliminas ese espacio.
    */
		img {
			position: absolute;
			left: 0;
			bottom: 0;
			display: block;
			height: calc(100% - var(--navbar-total-height) - 11px * 2);
			width: 100dvw;
			object-fit: cover;
		}

		.gradient {
			position: absolute;
			height: 100%;
			background: linear-gradient(to top, #000000da 10%, transparent 100%);
			top: 0;
			width: 100%;
		}

		.info-container {
			width: 100%;
			height: calc(100% - var(--navbar-total-height) - 11px * 2);
			position: absolute;
			bottom: 0;
			left: 0;
			color: #fff;
			padding: 0 3rem;
			display: flex;
			align-items: center;
			justify-content: space-between;

			@media (max-width: 768px) {
				padding: 0 1rem;
				flex-direction: column;
			}

			.arrow > svg {
				fill: #fff;
				width: 32px;
				height: 32px;
				transition: all 0.3s ease;

				@media (any-hover: hover) {
					&:hover {
						cursor: pointer;
						transform: scale(1.5);
					}
				}

				@media (max-width: 768px) {
					margin: 1.5rem 0;
					transform: rotate(90deg);

					&:hover {
						transform: rotate(90deg);
					}
				}
			}

			article {
				width: 100%;
				height: 100%;
				display: flex;
				justify-content: end;
				align-items: center;
				flex-direction: column;
				padding-bottom: 5rem;

				@media (max-width: 768px) {
					padding-bottom: 1rem;
				}

				@media (max-height: 768px) {
					padding-bottom: 2rem;
				}

				> a {
					text-decoration: none;
					margin-top: 1.5rem;
					background-color: transparent;
					color: #fff;
					border: 1px solid #fff;
					padding: 0.5rem 1rem;
					font-size: 1.5rem;
					transition: all 0.3s ease;
					border-radius: 5px;

					&:hover {
						background-color: #fff;
						color: #000;
						cursor: pointer;
					}
				}
			}

			/* Style one -> https://codepen.io/vedadesigns/pen/GPxYZg */
			h1 {
				margin: 0;
				position: relative;
				padding: 0;
				margin: 0;
				font-family: "Raleway", sans-serif;
				font-weight: 300;
				-webkit-transition: all 0.4s ease 0s;
				-o-transition: all 0.4s ease 0s;
				transition: all 0.4s ease 0s;
				text-transform: uppercase;
				padding-bottom: 5px;
				display: inline-block;
				text-align: center;

				&:before {
					width: 28px;
					height: 5px;
					display: block;
					content: "";
					position: absolute;
					bottom: 3px;
					left: 50%;
					margin-left: -14px;
					background-color: var(--line-color);
					z-index: 1;
					margin-left: calc(28px / 2 * -1);
				}
				&:after {
					width: var(--line-width);
					height: 1px;
					display: block;
					content: "";
					position: relative;
					margin-top: 25px;
					left: 50%;
					text-align: center;
					margin-left: calc(70% / 2 * -1);
					background-color: var(--line-color);
				}
			}
		}
	}
</style>
