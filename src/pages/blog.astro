---
import MyImage from "@/components/MyImage.astro";
import { getValidPosts } from "@/helpers/posts";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import BasicLayout from "@/layouts/BasicLayout.astro";
import { getCollection } from "astro:content";
import { changeLanguage } from "i18next";

changeLanguage("en");

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
/*
  https://github.com/withastro/astro/blob/latest/examples/blog/src/components/FormattedDate.astro
*/
const allPosts = await getCollection("blogs");
const posts = getValidPosts(allPosts);
---

<BasicLayout description={t("blog.description")}>
	<div class="mt-8 flex justify-center px-8">
		<input
			class="mx-0 my-2 w-full animate-fade-up rounded border border-solid border-gray-700 p-2 text-black placeholder:text-gray-600 sm:w-[576px]"
			type="text"
			id="search"
			placeholder={t("blog.input.placeholder")}
		/>
	</div>
	<div class="blogs-container px-8 py-0">
		<section class="mx-0 my-4 flex flex-wrap justify-center gap-2">
			{
				posts.map((post) => {
					const date = new Date(post.data.pubDate);
					const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}-${String(date.getDate()).padStart(2, "0")}`;
					const tags = post.data.tags;

					return (
						<article class="max-w-full animate-fade-up animate-duration-[1500ms]">
							<a class="post relative h-[300px] w-[500px] max-w-full" href={`posts/${post.slug}`}>
								<MyImage
									imagePath={post.data.image?.src}
									altText={post.data.image?.alt}
									widths={[500, 1000]}
									sizes="(min-width: 600px) 500px, calc(96.43vw - 59px)"
									class="absolute left-0 top-0 h-full w-full rounded-md object-cover"
								/>
								<div class="gradient" />

								<div class="info absolute bottom-1 left-1 text-white">
									<h2>{post.data.title}</h2>
									<div class="flex justify-between">
										<p class="text-xs">{formattedDate}</p>
										<div class="flex gap-1 text-xs">
											{tags.map((tag) => (
												<span>#{tag}</span>
											))}
										</div>
									</div>
								</div>
							</a>
						</article>
					);
				})
			}
		</section>
	</div>
</BasicLayout>

<script>
	const loadScript = () => {
		document.getElementById("search")?.addEventListener("input", (e: InputEvent) => {
			const input = e.target as HTMLInputElement;
			const search = input.value.toLowerCase();

			const $allPosts = document.querySelectorAll(".post");

			$allPosts.forEach((post: HTMLAnchorElement) => {
				const $titleElement = post.querySelector("h2") as HTMLHeadingElement;
				const $tags = post.querySelectorAll(".tags span");
				const $date = post.querySelector(".secondary-info p") as HTMLParagraphElement;
				const title = $titleElement?.textContent?.toLowerCase();

				const tags = Array.from($tags).map((tag) => tag?.textContent?.toLowerCase());
				const date = $date?.textContent?.toLowerCase();

				if (title?.includes(search) || tags.some((tag) => tag?.includes(search)) || date?.includes(search)) {
					post.style.display = "block";
				} else {
					post.style.display = "none";
				}
			});
		});
	};

	document.addEventListener("astro:page-load", loadScript);
</script>

<style>
	.blogs-container {
		.post {
			--width: 500px;
			--height: 300px;

			.gradient {
				@apply relative left-0 top-0 h-[var(--height)] w-[var(--width)] max-w-full rounded-[10px];
				background: linear-gradient(to top, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0) 100%);
			}
			@media (max-width: 576px) {
				.gradient {
					@apply h-[calc(var(--height)_/_1.25)];
				}
			}

			.info {
				width: calc(100% - 4px * 2);
			}

			@media (max-width: 576px) {
				height: calc(var(--height) / 2);
			}
		}
	}
</style>
