---
import "@/../node_modules/leaflet/dist/leaflet.css";
import Calendar from "@/components/Calendar.astro";
import Footer from "@/components/Footer.astro";
import Navbar from "@/components/Navbar.astro";
import "@/global.css";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import i18next, { changeLanguage } from "i18next";

changeLanguage("en");

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!doctype html>
<html lang={i18next.language}>
	<head>
		<meta name="google-site-verification" content="5GRhhm_YYdtAFIMnUytnZRT8Dwghpw9EKt428qz0IhY" />
		<meta charset="UTF-8" />
		<!-- For SEO -->
		<link rel="sitemap" href="/sitemap-index.xml" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="canonical" href="https://inesworld.vercel.app/" />

		<title>Inesworld</title>

		<!-- TODO: write description -->
		<meta name="description" content="Interactive map with the countries I have visited and those I plan to visit." />
	</head>
	<body>
		<Navbar />
		<h1 class="title">{t("map.title")}</h1>

		<div id="map"></div>

		<Calendar />

		<div class="px-8">
			<h2 class="subtitle mt-4">
				{t("map.subtitle_2")}
			</h2>
			<div id="comming-countries" class="flex flex-wrap justify-center gap-4"></div>
		</div>

		<div class="flex flex-col p-8">
			<h2 class="subtitle">
				{t("map.subtitle_3")}
			</h2>
			<div id="visited-countries" class="grid w-full grid-cols-[repeat(auto-fit,minmax(300px,1fr))] gap-4"></div>
		</div>

		<Footer />
	</body>
</html>

<script>
	import atlas from "@/data/atlas.geo.json";
	// Next trips
	const commingContainer = document.getElementById("comming-countries") as HTMLDivElement;
	const countriesToVisit = atlas.features.filter((country) => country.properties.visited === 1);
	countriesToVisit.forEach((country) => createCard(commingContainer, country.properties));

	// countried visited
	const visitedContainer = document.getElementById("visited-countries") as HTMLDivElement;
	const countriesVisited = atlas.features.filter((country) => country.properties.visited === 2);
	countriesVisited.forEach((country) => createCard(visitedContainer, country.properties));

	function createCard(container: HTMLDivElement, countryProperties) {
		const langName = `name_${document.documentElement.lang}`;
		const div = document.createElement("div");
		div.classList.add("card", "w-full", "bg-base-200", "shadow-2xl", "sm:max-w-[400px]");
		div.innerHTML = `
      <div class="card-body p-0 flex flex-row">
        <p class="fi fi-${countryProperties.iso_a2.toLowerCase()} !h-[66px] !w-[5rem] !rounded-l-2xl grow-0"></p>
        <h2 class="card-title px-2 sm:text-center">${countryProperties[langName]}</h2>
      </div>
    `;
		container.appendChild(div);
	}
</script>

<script>
	import introJs from "intro.js";
	import "intro.js/introjs.css";

	const loadScript = () => {
		const guideshouldNotRun_map = localStorage.getItem("guideshouldNotRun_map");
		if (guideshouldNotRun_map) return;

		introJs()
			.setOptions({
				tooltipClass: "guide",
			})
			.oncomplete(() => {
				localStorage.setItem("guideshouldNotRun_map", "true");
			})
			.setOptions({
				steps: [
					{
						title: "Let's start a new journey together!",
						intro:
							"Right now you are viewing an interactive map with the countries I have visited and those I plan to visit. You can click on each country to see more information about it.",
					},
					{
						element: document.querySelector(".info.legend") as HTMLElement,
						intro:
							"We have some filters! You can filter the countries by visited status. Click on the filter to see the countries that match the filter. Click again to remove the filter.",
					},
				],
			})
			.start();
	};
	loadScript();
	document.addEventListener("astro:page-load", loadScript);
</script>

<script>
	import { markersToShow } from "@/constants";
	import {
		addHouseMarker,
		addTiles,
		addTravellingMarker,
		getColorFromVisitedProperty,
		getDefaultGeoJsonStyle,
		getIconExtendOptions,
		highlightFeature,
		mergeData,
		onAdd,
		preventMapDrag,
		resetHighlight,
		update,
	} from "@/helpers/map";
	import type { GEOJson } from "@/types";
	import * as L from "leaflet";
	import "leaflet-polylinedecorator";

	const geoJson: GEOJson = {
		type: "FeatureCollection",
		features: [],
	};
	mergeData(geoJson);

	declare var L: any;

	// create a map
	const map = L.map("map").setView(markersToShow.livingIn, 3);
	const tiles = addTiles(L, map);

	preventMapDrag(L, map);

	// control that shows state info on hover
	const info = L.control();
	info.onAdd = onAdd;
	info.update = update;
	info.addTo(map);

	/* global statesData */
	const geojson = L.geoJson(geoJson, {
		style: getDefaultGeoJsonStyle,
		onEachFeature,
	}).addTo(map);

	/* Add markers */
	const LeafIcon = L.Icon.extend(getIconExtendOptions);

	const houseIcon = new LeafIcon({ iconUrl: "/house.png" });
	const planeIcon = new LeafIcon({ iconUrl: "/plane.png" });

	const houseMarker = addHouseMarker(L, map, houseIcon);
	addTravellingMarker(L, map, houseMarker, planeIcon);

	map.attributionControl.addAttribution('Population data &copy; <a href="http://census.gov/">US Census Bureau</a>');

	const legend = L.control({ position: "bottomright" });

	legend.onAdd = legendOnAdd;

	legend.addTo(map);

	function zoomToFeature(e) {
		map.fitBounds(e.target.getBounds());
	}

	function onEachFeature(feature, layer) {
		layer.on({
			mouseover: handleHighlightFeature,
			mouseout: handleResetHighlight,
			click: zoomToFeature,
		});
	}

	function handleHighlightFeature(e) {
		highlightFeature(e, info);
	}

	function handleResetHighlight(e) {
		resetHighlight(e, info, geojson);
	}

	function legendOnAdd(map) {
		const div = L.DomUtil.create("div", "info legend");
		div.dataset.filterActive = -1;
		const labels = ["Not visited", "Plan to visit", "Visited"];

		// get number of countries in each category
		const visited = geoJson.features.reduce(
			(acc, feature) => {
				acc[feature.properties.visited]++;
				return acc;
			},
			[0, 0, 0]
		);

		const divGuide = renderHTMLLegend(div, labels, visited);
		return divGuide;
	}

	function highlightVisit(this, event: PointerEvent, div) {
		const filterActive = Number(this.parentNode.dataset.filterActive);
		const filterClicked = Array.from(this.parentNode.children).indexOf(this);
		const sameFilter = filterActive === filterClicked;

		// add filter-not-selected class to all divs unless the one clicked
		// if the filter is the same as the one clicked, remove the class
		if (!sameFilter) {
			Array.from(this.parentNode.children).forEach((child: HTMLDivElement) => {
				child.classList.add("filter-not-selected");
			});
			this.classList.remove("filter-not-selected");
		} else {
			Array.from(this.parentNode.children).forEach((child: HTMLDivElement) => {
				child.classList.remove("filter-not-selected");
			});
		}

		if (sameFilter) {
			div.dataset.filterActive = -1;
			geojson.eachLayer((layer) => {
				layer.setStyle({
					fillOpacity: 0.7,
				});
			});
			return div;
		} else {
			div.dataset.filterActive = filterClicked;
			geojson.eachLayer((layer) => {
				if (layer.feature.properties.visited !== filterClicked) {
					layer.setStyle({
						fillOpacity: 0.1,
					});
				} else {
					layer.setStyle({
						fillOpacity: 0.7,
					});
				}
			});
		}
	}

	function renderHTMLLegend(div, labels, visited) {
		function handleHighlightVisit(event) {
			highlightVisit.call(this, event, div);
		}
		for (let i = 0; i < labels.length; i++) {
			const visitContainer = L.DomUtil.create("div", "");
			visitContainer.style.cursor = "pointer";
			visitContainer.onclick = handleHighlightVisit;
			visitContainer.innerHTML = `<i style="background:${getColorFromVisitedProperty(i)}"></i> ${labels[i]} - ${visited[i]} countries`;
			div.appendChild(visitContainer);
		}

		const divGuide = document.createElement("div");
		divGuide.dataset.title = "We have some filters!";
		divGuide.dataset.intro =
			"You can filter the countries by visited status. Click on the filter to see the countries that match the filter. Click again to remove the filter.";

		return divGuide.appendChild(div);
	}
</script>

<style is:inline>
	#map {
		--footer-text-height: 22px;
		--footer-padding: 1rem;
		--footer-total-height: calc(var(--footer-text-height) + var(--footer-padding) * 2);

		--navbar-height: 4rem;
		--navbar-padding: 0.5rem;
		--navbar-total-height: calc(var(--navbar-height) + var(--navbar-padding) * 2);

		--total-map-height: calc(100% - var(--footer-total-height) - var(--navbar-total-height));

		width: 100%;
		height: calc(var(--total-map-height) - 20%);
	}

	html,
	body {
		height: 100%;
		width: 100%;
	}

	.info {
		padding: 6px 8px;
		font:
			14px/16px Arial,
			Helvetica,
			sans-serif;
		background: white;
		background: rgba(255, 255, 255, 0.8);
		box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
		border-radius: 5px;
		color: black;

		.country-name {
			font-weight: bold;
		}

		.text {
			margin: 0;
		}

		.filter-not-selected {
			filter: opacity(0.5);
		}
	}
	.info h4 {
		margin: 0 0 5px;
		color: #777;
	}

	.legend {
		line-height: 18px;
		color: #555;
	}
	.legend i {
		width: 18px;
		height: 18px;
		float: left;
		margin-right: 8px;
		opacity: 0.7;
	}
	.guide {
		color: black;
		max-width: 100%;
		width: 400px;
		min-width: 400px;
	}
</style>
