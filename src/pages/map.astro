---
import Nav from "@/components/Nav.astro";
import "@/global.css";
import "@/../node_modules/leaflet/dist/leaflet.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <Nav />
    <div id="map"></div>
  </body>
</html>

<script>
  import introJs from "intro.js";
  import "intro.js/introjs.css";

  const loadScript = () => {
    const guideshouldNotRun_map = localStorage.getItem("guideshouldNotRun_map");
    if (guideshouldNotRun_map) return;

    introJs()
      .setOptions({
        tooltipClass: "guide",
      })
      .oncomplete(() => {
        localStorage.setItem("guideshouldNotRun_map", "true");
      })
      .setOptions({
        steps: [
          {
            title: "Let's start a new journey together!",
            intro:
              "Right now you are viewing an interactive map with the countries I have visited and those I plan to visit. You can click on each country to see more information about it.",
          },
          {
            element: document.querySelector(".info.legend") as HTMLElement,
            intro:
              "We have some filters! You can filter the countries by visited status. Click on the filter to see the countries that match the filter. Click again to remove the filter.",
          },
        ],
      })
      .start();
  };
  loadScript();
  document.addEventListener("astro:page-load", loadScript);
</script>

<script>
  import type { GEOJson } from "@/types";
  import * as L from "leaflet";
  import "leaflet-polylinedecorator";
  import {
    addTiles,
    mergeData,
    preventMapDrag,
    getColorFromVisitedProperty,
    getDefaultGeoJsonStyle,
    highlightFeature,
    getIconExtendOptions,
    addTravellingMarker,
    addHouseMarker,
    resetHighlight,
  } from "@/helpers/map";

  const geoJson: GEOJson = {
    type: "FeatureCollection",
    features: [],
  };
  mergeData(geoJson);

  declare var L: any;

  // create a map
  const map = L.map("map").setView([47.712198, 46.313982], 3);
  const tiles = addTiles(L, map);

  preventMapDrag(L, map);

  // control that shows state info on hover
  const info = L.control();
  info.onAdd = onAdd;
  info.update = update;
  info.addTo(map);

  /* global statesData */
  const geojson = L.geoJson(geoJson, {
    style: getDefaultGeoJsonStyle,
    onEachFeature,
  }).addTo(map);

  /* Add markers */
  const LeafIcon = L.Icon.extend(getIconExtendOptions);

  const houseIcon = new LeafIcon({ iconUrl: "house.png" });
  const planeIcon = new LeafIcon({ iconUrl: "plane.png" });

  const houseMarker = addHouseMarker(L, map, houseIcon);
  addTravellingMarker(L, map, houseMarker, planeIcon);

  function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
  }

  function onEachFeature(feature, layer) {
    layer.on({
      mouseover: handleHighlightFeature,
      mouseout: handleResetHighlight,
      click: zoomToFeature,
    });
  }

  map.attributionControl.addAttribution(
    'Population data &copy; <a href="http://census.gov/">US Census Bureau</a>',
  );

  const legend = L.control({ position: "bottomright" });

  legend.onAdd = function (map) {
    const div = L.DomUtil.create("div", "info legend");
    div.dataset.filterActive = -1;
    const labels = ["Not visited", "Plan to visit", "Visited"];

    // get number of countries in each category
    const visited = geoJson.features.reduce(
      (acc, feature) => {
        acc[feature.properties.visited]++;
        return acc;
      },
      [0, 0, 0],
    );

    function highlightVisit(event: PointerEvent) {
      const filterActive = Number(this.parentNode.dataset.filterActive);
      const filterClicked = Array.from(this.parentNode.children).indexOf(this);
      const sameFilter = filterActive === filterClicked;

      // add filter-not-selected class to all divs unless the one clicked
      // if the filter is the same as the one clicked, remove the class
      if (!sameFilter) {
        Array.from(this.parentNode.children).forEach(
          (child: HTMLDivElement) => {
            child.classList.add("filter-not-selected");
          },
        );
        this.classList.remove("filter-not-selected");
      } else {
        Array.from(this.parentNode.children).forEach(
          (child: HTMLDivElement) => {
            child.classList.remove("filter-not-selected");
          },
        );
      }

      if (sameFilter) {
        div.dataset.filterActive = -1;
        geojson.eachLayer((layer) => {
          layer.setStyle({
            fillOpacity: 0.7,
          });
        });
        return div;
      } else {
        div.dataset.filterActive = filterClicked;
        geojson.eachLayer((layer) => {
          if (layer.feature.properties.visited !== filterClicked) {
            layer.setStyle({
              fillOpacity: 0.1,
            });
          } else {
            layer.setStyle({
              fillOpacity: 0.7,
            });
          }
        });
      }
    }

    for (let i = 0; i < labels.length; i++) {
      const visitContainer = L.DomUtil.create("div", "");
      visitContainer.style.cursor = "pointer";
      visitContainer.onclick = highlightVisit;
      visitContainer.innerHTML = `<i style="background:${getColorFromVisitedProperty(i)}"></i> ${labels[i]} - ${visited[i]} countries`;
      div.appendChild(visitContainer);
    }

    const divGuide = document.createElement("div");
    divGuide.dataset.title = "We have some filters!";
    divGuide.dataset.intro =
      "You can filter the countries by visited status. Click on the filter to see the countries that match the filter. Click again to remove the filter.";

    divGuide.appendChild(div);
    return divGuide;
  };

  legend.addTo(map);

  function handleHighlightFeature(e) {
    highlightFeature(e, info);
  }

  function handleResetHighlight(e) {
    resetHighlight(e, info, geojson);
  }

  function onAdd(map) {
    this._div = L.DomUtil.create("div", "info");
    this.update();
    return this._div;
  }

  function update(props) {
    if (!props) {
      const contents = "Hover over a state";
      this._div.innerHTML = contents;
    } else {
      // get the language of the user using js
      var userLang = navigator.language.split("-")[0];

      const contents = props?.name || "N/A";
      this._div.innerHTML = `
        <h4>Country information</h4>
        <p class="text country-name">Name: ${contents}</p>
        <p class="text country-name">Name in ${userLang}: ${props?.[`name_${userLang}`] || "N/A"}</p>
        <p class="text text">Continent: ${props?.continent || "N/A"}</p>
        <p class="text">Subregion: ${props?.subregion || "N/A"}</p>
      `;
    }
  }
</script>

<script>
  const menu = document.querySelector(".menu") as HTMLUListElement;
  const hamburger = document.querySelector(".hamburger") as HTMLButtonElement;
  const closeIcon = document.querySelector(".close-icon") as HTMLElement;
  const menuIcon = document.querySelector(".menu-icon") as HTMLElement;
  const nav = document.querySelector("nav") as HTMLElement;

  function toggleMenu() {
    if (menu.classList.contains("show-menu")) {
      menu.classList.remove("show-menu");
      closeIcon.classList.toggle("hide");
      menuIcon.classList.toggle("hide");
      nav.classList.add("absolute");
    } else {
      menu.classList.add("show-menu");
      closeIcon.classList.toggle("hide");
      menuIcon.classList.toggle("hide");
      nav.classList.remove("absolute");
    }
  }
  hamburger.addEventListener("click", toggleMenu);
</script>

<style is:inline>
  #map {
    width: 100vw;
    height: 100vh;
  }

  .info {
    padding: 6px 8px;
    font:
      14px/16px Arial,
      Helvetica,
      sans-serif;
    background: white;
    background: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    border-radius: 5px;
    color: black;

    .country-name {
      font-weight: bold;
    }

    .text {
      margin: 0;
    }

    .filter-not-selected {
      filter: opacity(0.5);
    }
  }
  .info h4 {
    margin: 0 0 5px;
    color: #777;
  }

  .legend {
    line-height: 18px;
    color: #555;
  }
  .legend i {
    width: 18px;
    height: 18px;
    float: left;
    margin-right: 8px;
    opacity: 0.7;
  }
  nav {
    position: absolute !important;
    left: 50%;
    transform: translateX(-50%);
    width: 100%;

    z-index: 1000 !important;

    a {
      color: black !important;
    }

    .icon {
      color: black !important;
      fill: black !important;
    }
  }
  @media (max-width: 576px) {
    .hamburger {
      z-index: 1001 !important;
    }
    nav {
      position: relative !important;

      a {
        color: white !important;
      }

      .icon {
        color: white !important;
        fill: white !important;
      }
    }

    .absolute {
      position: absolute !important;
    }
  }

  .guide {
    color: black;
    max-width: 100%;
    width: 400px;
    min-width: 400px;
  }
</style>
