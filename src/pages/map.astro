---
import Nav from "@/components/Nav.astro";
import "@/global.css";
import "@/../node_modules/leaflet/dist/leaflet.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <Nav />
    <div id="map"></div>
  </body>
</html>

<script>
  import atlas from "@/data/atlas.geo.json";
  import geometries from "@/data/geometriesExtraction.json";
  import type { GEOJson } from "@/types";
  import * as L from "leaflet";
  import "leaflet-polylinedecorator";
  import { markersToShow } from "@/data/markers";

  const geoJson: GEOJson = {
    type: "FeatureCollection",
    features: [],
  };

  // merge atlas with geometries by name
  atlas.features.forEach((feature) => {
    const geometry = geometries[feature.properties.name];
    if (geometry) {
      geoJson.features.push({
        ...feature,
        geometry: geometry,
      });
    }
  });

  declare var L: any;

  const map = L.map("map").setView([47.712198, 46.313982], 3);

  const tiles = L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
    minZoom: 2,
    maxZoom: 19,
    noWrap: true,
    attribution:
      '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
  }).addTo(map);

  // prevent dragging the map out of bounds
  var southWest = L.latLng(-89.98155760646617, -180),
    northEast = L.latLng(89.99346179538875, 180);
  var bounds = L.latLngBounds(southWest, northEast);
  map.setMaxBounds(bounds);
  map.on("drag", function () {
    map.panInsideBounds(bounds, { animate: false });
  });

  // control that shows state info on hover
  const info = L.control();

  info.onAdd = function (map) {
    this._div = L.DomUtil.create("div", "info");
    this.update();
    return this._div;
  };

  info.update = function (props) {
    if (!props) {
      const contents = "Hover over a state";
      this._div.innerHTML = contents;
    } else {
      // get the language of the user using js
      var userLang = navigator.language.split("-")[0];

      const contents = props?.name || "N/A";
      this._div.innerHTML = `
        <h4>Country information</h4>
        <p class="text country-name">Name: ${contents}</p>
        <p class="text country-name">Name in ${userLang}: ${props?.[`name_${userLang}`] || "N/A"}</p>
        <p class="text text">Continent: ${props?.continent || "N/A"}</p>
        <p class="text">Subregion: ${props?.subregion || "N/A"}</p>
      `;
    }
  };

  info.addTo(map);

  // get color depending on population density value
  function getColor(d) {
    if (d === 0) return "rgba(255, 0, 0, 0.3)";
    else if (d === 1) return "rgba(0, 0, 255, 0.3)";
    else return "rgba(0, 255, 0, 0.3)";
  }

  function style(feature) {
    return {
      weight: 2,
      opacity: 1,
      color: "white",
      dashArray: "3",
      fillOpacity: 0.7,
      fillColor: getColor(feature.properties.visited),
    };
  }

  function highlightFeature(e) {
    const layer = e.target;

    layer.setStyle({
      weight: 5,
      color: "#666",
      dashArray: "",
      fillOpacity: 0.7,
    });

    layer.bringToFront();

    info.update(layer.feature.properties);
  }

  /* global statesData */
  const geojson = L.geoJson(geoJson, {
    style,
    onEachFeature,
  }).addTo(map);

  const iconSize = 48;
  const iconAnchor = iconSize / 2; // I don't know this way
  const LeafIcon = L.Icon.extend({
    options: {
      iconSize: [iconSize, iconSize],
      iconAnchor: [iconAnchor, iconSize],
      popupAnchor: [0, -iconSize],
    },
  });

  const houseIcon = new LeafIcon({ iconUrl: "house.png" });
  const planeIcon = new LeafIcon({ iconUrl: "plane.png" });

  const houseMarker = L.marker(markersToShow.livingIn, { icon: houseIcon })
    .addTo(map)
    .bindPopup("I'm based here");

  if (markersToShow.travellingTo.length !== 0) {
    const planeMarker = L.marker(markersToShow.travellingTo, {
      icon: planeIcon,
    })
      .addTo(map)
      .bindPopup("I'm traveling here");

    var latlngs = Array();

    //Get latlng from first marker
    latlngs.push(houseMarker.getLatLng());

    //Get latlng from first marker
    latlngs.push(planeMarker.getLatLng());

    //You can just keep adding markers

    //From documentation http://leafletjs.com/reference.html#polyline
    // create a red polyline from an arrays of LatLng points
    // var polyline = L.polyline(latlngs, { color: "red" }).addTo(map);

    // zoom the map to the polyline
    // map.fitBounds(polyline.getBounds());

    //https:github.com/bbecquet/Leaflet.PolylineDecorator
    var pathPattern = L.polylineDecorator(
      [houseMarker.getLatLng(), planeMarker.getLatLng()],
      {
        patterns: [
          {
            offset: 0,
            repeat: 10,
            symbol: L.Symbol.dash({
              pixelSize: 5,
              pathOptions: {
                color: "#000",
                weight: 3,
                opacity: 0.5,
              },
            }),
          },
          {
            offset: "16%",
            repeat: "33%",
            symbol: L.Symbol.marker({
              rotate: true,
              markerOptions: {
                icon: L.icon({
                  iconUrl: "plane.png",
                  iconAnchor: [16, 16],
                  iconSize: [32, 32],
                }),
              },
            }),
          },
        ],
      },
    ).addTo(map);
  }

  function resetHighlight(e) {
    const div = document.querySelector("div.info.legend") as HTMLDivElement;
    const filterActive = Number(div.dataset.filterActive);
    geojson.resetStyle(e.target);
    if (filterActive !== -1) {
      // iterate in the geojson layers. If the layer is not the same as the one hovered, set opacity to 0.1
      geojson.eachLayer((layer) => {
        geojson.resetStyle(e.target);
        if (layer.feature.properties.visited !== filterActive) {
          layer.setStyle({
            fillOpacity: 0.1,
          });
        } else {
          layer.setStyle({
            fillOpacity: 0.7,
          });
        }
      });
    }

    info.update();
  }

  function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
  }

  function onEachFeature(feature, layer) {
    layer.on({
      mouseover: highlightFeature,
      mouseout: resetHighlight,
      click: zoomToFeature,
    });
  }

  map.attributionControl.addAttribution(
    'Population data &copy; <a href="http://census.gov/">US Census Bureau</a>',
  );

  const legend = L.control({ position: "bottomright" });

  legend.onAdd = function (map) {
    const div = L.DomUtil.create("div", "info legend");
    div.dataset.filterActive = -1;
    const labels = ["Not visited", "Plan to visit", "Visited"];

    // get number of countries in each category
    const visited = atlas.features.reduce(
      (acc, feature) => {
        acc[feature.properties.visited]++;
        return acc;
      },
      [0, 0, 0],
    );

    function highlightVisit(event: PointerEvent) {
      const filterActive = Number(this.parentNode.dataset.filterActive);
      const filterClicked = Array.from(this.parentNode.children).indexOf(this);
      const sameFilter = filterActive === filterClicked;

      // add filter-not-selected class to all divs unless the one clicked
      // if the filter is the same as the one clicked, remove the class
      if (!sameFilter) {
        Array.from(this.parentNode.children).forEach(
          (child: HTMLDivElement) => {
            child.classList.add("filter-not-selected");
          },
        );
        this.classList.remove("filter-not-selected");
      } else {
        Array.from(this.parentNode.children).forEach(
          (child: HTMLDivElement) => {
            child.classList.remove("filter-not-selected");
          },
        );
      }

      if (sameFilter) {
        div.dataset.filterActive = -1;
        geojson.eachLayer((layer) => {
          layer.setStyle({
            fillOpacity: 0.7,
          });
        });
        return div;
      } else {
        div.dataset.filterActive = filterClicked;
        geojson.eachLayer((layer) => {
          if (layer.feature.properties.visited !== filterClicked) {
            layer.setStyle({
              fillOpacity: 0.1,
            });
          } else {
            layer.setStyle({
              fillOpacity: 0.7,
            });
          }
        });
      }
    }

    for (let i = 0; i < labels.length; i++) {
      const visitContainer = L.DomUtil.create("div", "");
      visitContainer.style.cursor = "pointer";
      visitContainer.onclick = highlightVisit;
      visitContainer.innerHTML = `<i style="background:${getColor(i)}"></i> ${labels[i]} - ${visited[i]} countries`;
      div.appendChild(visitContainer);
    }

    return div;
  };

  legend.addTo(map);
</script>

<script>
  const menu = document.querySelector(".menu") as HTMLUListElement;
  const hamburger = document.querySelector(".hamburger") as HTMLButtonElement;
  const closeIcon = document.querySelector(".close-icon") as HTMLElement;
  const menuIcon = document.querySelector(".menu-icon") as HTMLElement;
  const nav = document.querySelector("nav") as HTMLElement;

  function toggleMenu() {
    if (menu.classList.contains("show-menu")) {
      menu.classList.remove("show-menu");
      closeIcon.classList.toggle("hide");
      menuIcon.classList.toggle("hide");
      nav.classList.add("absolute");
    } else {
      menu.classList.add("show-menu");
      closeIcon.classList.toggle("hide");
      menuIcon.classList.toggle("hide");
      nav.classList.remove("absolute");
    }
  }
  hamburger.addEventListener("click", toggleMenu);
</script>

<style is:inline>
  #map {
    width: 100vw;
    height: 100vh;
  }

  .info {
    padding: 6px 8px;
    font:
      14px/16px Arial,
      Helvetica,
      sans-serif;
    background: white;
    background: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    border-radius: 5px;
    color: black;

    .country-name {
      font-weight: bold;
    }

    .text {
      margin: 0;
    }

    .filter-not-selected {
      filter: opacity(0.5);
    }
  }
  .info h4 {
    margin: 0 0 5px;
    color: #777;
  }

  .legend {
    line-height: 18px;
    color: #555;
  }
  .legend i {
    width: 18px;
    height: 18px;
    float: left;
    margin-right: 8px;
    opacity: 0.7;
  }
  nav {
    position: absolute !important;
    left: 50%;
    transform: translateX(-50%);
    width: 100%;

    z-index: 1000 !important;

    a {
      color: black !important;
    }

    .icon {
      color: black !important;
      fill: black !important;
    }
  }
  @media (max-width: 576px) {
    .hamburger {
      z-index: 1001 !important;
    }
    nav {
      position: relative !important;

      a {
        color: white !important;
      }

      .icon {
        color: white !important;
        fill: white !important;
      }
    }

    .absolute {
      position: absolute !important;
    }
  }
</style>
